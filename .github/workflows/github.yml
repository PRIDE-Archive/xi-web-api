name: CI/CD Pipeline to deploy in Embassy Cloud EBI Openstack platform

on:
  push:
    branches:
      - pride
  workflow_dispatch:

env:
  IMAGE_NAME: xi2_xiview_loader_image
  GHCR_REGISTRY: ghcr.io
  USERNAME: ${{ github.repository_owner }}

jobs:
  docker_build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: create Dockerfile with environment variables
      run: |
          sed -e "s|\${PORT}|${{ env.PORT }}|g" \
              -e "s|\${URL_PREFIX}|${{ env.URL_PREFIX }}|g" \
              -e "s|\${APP_ENTRY}|${{ env.APP_ENTRY }}|g" \
              .Dockerfile > Dockerfile

#    - name: Print Dockerfile
#      run: cat Dockerfile

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to GHCR
      uses: docker/login-action@v1
      with:
        registry: ${{ env.GHCR_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ env.GHCR_REGISTRY }}/${{ env.USERNAME }}/${{ env.IMAGE_NAME }}:latest


  deploy:
    needs: docker_build
    runs-on: ubuntu-latest
    env:
      DOCKER_PULL_SECRET: pride-gitlab-docker-secret
      DATABASE_INI: application-db-config
      IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
#    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install gettext
        run: sudo apt-get update && sudo apt-get install -y gettext tzdata coreutils

      - name: Set up Kubernetes environment
        run: |
          mkdir -p ~/.kube
          echo ${{ secrets.KUBE_CONFIG }} > kubeconfig
          base64 -d kubeconfig > ~/.kube/config
          kubectl config get-contexts

      - name: Create a Namespace if not exists
        run: kubectl create namespace ${{ env.K8S_NAMESPACE }} || true

      - name: Delete the docker pull secrete if exist
        run: kubectl -n ${{ env.K8S_NAMESPACE }} delete secret ${{ env.DOCKER_PULL_SECRET }} || true

      - name: Create a Docker registry secret with new image
        run: |
          kubectl -n ${{ env.K8S_NAMESPACE }} create secret docker-registry ${{ env.DOCKER_PULL_SECRET }} \
          --docker-server=${{ env.GHCR_REGISTRY }} \
          --docker-username=${{ secrets.GITHUB_ACTOR }} \
          --docker-password=${{ secrets.GHCR_TOKEN }}

      - name: Substitute environment variables
        run: < default.database.ini > database.ini

      - name: Create ConfigMap
        run: kubectl -n ${{ env.K8S_NAMESPACE }} create configmap ${{ env.DATABASE_INI }} --from-file=database.ini || true

      - name: Replace configmap if it already exists
        run: kubectl -n ${{ env.K8S_NAMESPACE }} create configmap ${{ env.DATABASE_INI }} --from-file=database.ini -o yaml --dry-run=client | kubectl replace -f -

      - name: Substitute environment variables
        run: envsubst < .kubernetes.yml > kubernetes.yml

      - name: Print kubernetes.yml
        run: cat kubernetes.yml

#      - name: Deploy to Kubernetes
#        run: kubectl -n ${{ env.K8S_NAMESPACE }} apply -f kubernetes.yml