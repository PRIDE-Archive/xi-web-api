name: CI/CD Pipeline to deploy in Embassy Cloud EBI Openstack platform

on:
  push:
    branches:
      - pride
  workflow_dispatch:

env:
  IMAGE_NAME: xi2_xiview_loader_image
  GHCR_REGISTRY: ghcr.io
  USERNAME: ${{ github.repository_owner }}
#  K8S_NAMESPACE: ${{ env.K8S_NAMESPACE }}

jobs:
#  docker_build:
#    runs-on: ubuntu-latest
#
#    steps:
#    - name: Checkout repository
#      uses: actions/checkout@v2
#
#    - name: create Dockerfile with environment variables
#      run: |
#          sed -e "s|\${PORT}|${{ env.PORT }}|g" \
#              -e "s|\${URL_PREFIX}|${{ env.URL_PREFIX }}|g" \
#              -e "s|\${APP_ENTRY}|${{ env.APP_ENTRY }}|g" \
#              .Dockerfile > Dockerfile
#
##    - name: Print Dockerfile
##      run: cat Dockerfile
#
#    - name: Set up Docker Buildx
#      uses: docker/setup-buildx-action@v1
#
#    - name: Login to GHCR
#      uses: docker/login-action@v1
#      with:
#        registry: ${{ env.GHCR_REGISTRY }}
#        username: ${{ github.actor }}
#        password: ${{ secrets.GHCR_TOKEN }}
#
#    - name: Build and push Docker image
#      uses: docker/build-push-action@v2
#      with:
#        context: .
#        push: true
#        tags: ${{ env.GHCR_REGISTRY }}/${{ env.USERNAME }}/${{ env.IMAGE_NAME }}:latest


  deploy:
#    needs: docker_build
    runs-on: ubuntu-latest
    environment: 'prod'
    env:
      DOCKER_PULL_SECRET: pride-gitlab-docker-secret
      DATABASE_INI: application-db-config
      DB_HOST : ${{ vars.DB_HOST }}
      DB_DATABASE_NAME : ${{ vars.DB_DATABASE_NAME }}
      DB_USER : ${{ vars.DB_USER }}
      DB_PASSWORD : ${{ vars.DB_PASSWORD }}
      DB_PORT : ${{ vars.DB_PORT }}
#    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y gettext tzdata coreutils

      - name: Create kubeconfig
        run: |
          mkdir -p ~/.kube
          echo ${{ secrets.KUBE_CONFIG }} > kubeconfig
          base64 -d kubeconfig > ~/.kube/config
          kubectl config get-contexts

      - name: Create a Namespace if not exists
        run: kubectl create namespace ${{ vars.K8S_NAMESPACE }} || true

      - name: Delete the docker pull secrete if exist
        run: kubectl -n ${{ vars.K8S_NAMESPACE }} delete secret ${{ env.DOCKER_PULL_SECRET }} || true

      - name: Create a Docker registry secret with new image
        run: |
          kubectl -n ${{ vars.K8S_NAMESPACE }} create secret docker-registry ${{ env.DOCKER_PULL_SECRET }} \
          --docker-server=${{ env.GHCR_REGISTRY }} \
          --docker-username=${{ github.actor }} \
          --docker-password=${{ secrets.GHCR_TOKEN }}

      - name: Substitute database variables by environment variables or variables
        run: envsubst < default.database.ini > database.ini
#        run: |
#          sed -e "s|\${DB_HOST}|${{ vars.DB_HOST }}|g" \
#              -e "s|\${DB_DATABASE_NAME}|${{ vars.DB_DATABASE_NAME }}|g" \
#              -e "s|\${DB_USER}|${{ vars.DB_USER }}|g" \
#              -e "s|\${DB_PASSWORD}|${{ vars.DB_PASSWORD }}|g" \
#              -e "s|\${DB_PORT}|${{ vars.DB_PORT }}|g" \
#              default.database.ini > database.ini

      - name: Print database.ini
        run: cat database.ini

      - name: Create ConfigMap
        run: kubectl -n ${{ vars.K8S_NAMESPACE }} create configmap ${{ env.DATABASE_INI }} --from-file=database.ini || true

      - name: Replace configmap if it already exists
        run: kubectl -n ${{ vars.K8S_NAMESPACE }} create configmap ${{ env.DATABASE_INI }} --from-file=database.ini -o yaml --dry-run=client | kubectl replace -f -

      - name: Substitute kubernetes variables by environment variables or variables
        run: |
                  sed -e "s|\${PORT}|${{ vars.PORT }}|g" \
                      -e "s|\${node_port}|${{ vars.NODE_PORT }}|g" \
                      -e "s|\${app_name}|${{ vars.APP_NAME }}|g" \
                      -e "s|\${k8s_replicas}|${{ vars.K8S_REPLICAS }}|g" \
                      -e "s|\${K8S_NAMESPACE}|${{ vars.K8S_NAMESPACE }}|g" \
                      -e "s|\${DATABASE_INI}|${{ env.DATABASE_INI }}|g" \
                      -e "s|\${IMAGE}|${{ env.GHCR_REGISTRY }}/${{ env.USERNAME }}/${{ env.IMAGE_NAME }}:latest|g" \
                      .kubernetes.yml > kubernetes.yml

      - name: Print kubernetes.yml
        run: cat kubernetes.yml

#      - name: Deploy to Kubernetes
#        run: kubectl -n ${{ env.K8S_NAMESPACE }} apply -f kubernetes.yml